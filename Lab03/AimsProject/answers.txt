17. Question: Alternatively, to compare items in the cart, instead of using the Comparator class I have mentioned, you can use the Comparable interface and override the compareTo() method. You can refer to the Java docs to see the information of this interface. Suppose we are taking this Comparable interface approach.

- What class should implement the Comparable interface?
The class that should implement the Comparable<Media> interface is the Media class (or any of its subclasses like DigitalVideoDisc, CompactDisc, etc.) if you want those objects to have a "natural ordering."

- In those classes, how should you implement the compareTo() method to reflect the ordering that
we want?
Let’s say the desired order is by title (alphabetically), then by cost (ascending). Your implementation would look like:
@Override
public int compareTo(Media other) {
    int titleCompare = this.title.compareToIgnoreCase(other.title);
    if (titleCompare != 0) return titleCompare;
    return Float.compare(this.cost, other.cost);
}
This compares the title first; if titles are the same, then it compares cost.

- Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this
Comparable interface approach?
No, with Comparable, you can only define one natural ordering via compareTo(). If you need multiple ordering strategies (e.g.,: title → cost, cost → title), then you should use Comparator classes instead, which allow you to define and switch between multiple custom orderings.

- Suppose the DVDs have a different ordering rule from the other media types, that is by title, then
decreasing length, then cost. How would you modify your code to allow this?
There are two main ways to do this:

Option 1: Add logic directly into the compareTo() method
You could modify the compareTo() method inside the Media class to check if the object being compared is a DVD. If it is, you apply the DVD-specific ordering rule:
First, compare the titles (alphabetically).
If the titles are the same, compare the lengths in decreasing order (i.e., longer DVDs come first).
If the lengths are also the same, compare the costs (lower cost first).
This approach works, but it mixes up logic for different media types in one method, which can get messy and hard to maintain.

Option 2: Use a custom Comparator for DVDs (better approach)
A cleaner and more flexible way is to create a separate class specifically for comparing DVDs, using the Comparator interface. In that class, you implement the DVD-specific rule:
Sort by title, then by length (in decreasing order), and then by cost.
This lets you keep the comparison logic separate from your main Media class, making your code easier to understand and maintain.
Then, when you need to sort DVDs (like when displaying them in the cart), you use this comparator instead of the general one.